.TH SDL_AndroidGetActivity 3 "2018.10.07" "https://github.com/haxpor/sdl2-manpage" "SDL2"
.SH NAME
\fBSDL_AndroidGetActivity\fR -- Structure

.SH SYNOPSIS
Use this function to retrieve the Java instance of the activity class in an Android application.

.SH SYNTAX
.TS
tab(:) allbox;
a.
T{
.nf
void* SDL_AndroidGetActivity()
.fi
T}
.TE

.SH RETURN VALUE
Returns the jobject representing the instance of the Activity class of the Android application, or NULL on error.

The jobject returned by the function is a local reference and must be released by the caller. See the PushLocalFrame() and PopLocalFrame() or DeleteLocalRef() functions of the Java native interface (see \fIhttp://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/functions.html\fR).

.SH CODE EXAMPLES

The first example uses C to work with JNI.

.TS
tab(:) allbox;
a.
T{
.nf
// This example uses C and a custom Java method name "void showHome()"

// Calls the void showHome() method of the Java instance of the activity.
void showHome(void)
{
  // retrieve the JNI environment
  JNIEnv* env = (JNIEnv*)SDL_AndroidGetJNIEnv();

  // retrieve the Java instance of the SDLActivity
  jobject activity = (jobject)SDL_AndroidGetActivity();

  // find the Java class of the activity. It should be SDLActivity or a subclass of it.
  jclass clazz = (*env)->GetObjectClass(env, activity);

  // find the identifier of the method to call
  // testMethod() will print "Print from testMethod() from Java code" in console
  jmethodID method_id (*env)->GetMethodID(env, clazz, "testMethod", "()V");

  // effectively call the Java method
  (*env)->CallVoidMethod(env, activity, method_id);

  // clean up the local references
  (*env)->DeleteLocalRef(env, activity);
  (*env)->DeleteLocalRef(env, clazz);

  // Warning (and discussion of implmentation details of SDL for Android):
  // Local references are automatically deleted if a native function called
  // from Java side returns. For SDL this native function is main() itself.
  // Therefore references need to be manually deleted because otherwise the
  // references will first be cleaned if main() returns (application exit).
}
.fi
T}
.TE

.PP
The second example requires C++ to work with JNI.

.TS
tab(:) allbox;
a.
T{
.nf
#include "SDL.h"
#include <jni.h>

// This example requires C++ and a custom Java method named "void showHome()"

// Calls the void showHome() method of the Java instance of the activity.
void showHome(void)
{
  // retrieve the JNI environment.
  JNIEnv* env = (JNIEnv*)SDL_AndroidGetJNIEnv();

  // retrieve the Java interface of the SDLActivity
  jobject activity = (jobject)SDL_AndroidGetActivity();

  // find the Java class of the activity. It should be SDLActivity or a subclass of it.
  jclass clazz(env->GetObjectClass(activity));

  // find the identifier of the method to call
  jmethodID method_id = env->GetMethodID(clazz, "showHome", "()V");

  // effectively call the Java method
  env->CallVoidMethod(activity, method_id);

  // clean up the local references
  env->DeleteLocalRef(activity);
  env->DeleteLocalRef(clazz);

  // Warning (and discussion of implmentation details of SDL for Android):
  // Local references are automatically deleted if a native function called
  // from Java side returns. For SDL this native function is main() itself.
  // Therefore references need to be manually deleted because otherwise the
  // references will first be cleaned if main() returns (application exit).
}
.fi
T}
.TE

.SH REMARKS
The prototype of the function is SDL's code actually declares a void* return type, even if the implementation returns a jobject. The rationale being that it allows not to include jni.h in the headers of the SDL.

.SH VERSION
This function is available since SDL 2.0.0.

.SH RELATED FUNCTIONS
\fISDL_AndroidGetJNIEnv
