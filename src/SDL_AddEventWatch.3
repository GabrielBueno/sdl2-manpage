.TH SDL_AddEventWatch 3 "2018.10.07" "https://github.com/haxpor/sdl2-manpage" "SDL2"
.SH NAME
\fBSDL_AddEventWatch\fR -- Function

.SH SYNOPSIS
Use this function to add a callback to triggered when an event is added to the event queue.

.SH SYNTAX
.TS
tab(:) allbox;
a.
T{
.nf
void SDL_AddEventWatch(SDL_EventFilter filter,
                       void*           userData)
.fi
T}
.TE

.SH FUNCTION PARAMETERS
.TS
tab(:) allbox;
ab l.
filter:T{
the function to call when an event happens; see \fIRemarks\fR for details
T}
userdata:T{
a pointer that is passed to \fBfiler\fR
T}
.TE

.SH REMARKS
The function prototype for \fBfilter\fR is:

.TS
tab(:) allbox;
a.
T{
.nf
int YourEventFilter(void* userdata,
                    SDL_Event* event)
.fi
T}
.TE

.PP
where \fIYourEventFilter\fR is the name of your function and its parameters are:

.TS
tab(:) allbox;
a l.
userdata:T{
what was passed as \fBuserdata\fR to \fBSDL_AddEventWatch()\fR
T}
event:T{
the event that triggered the callback
T}
.TE

.PP
\fBfilter\fR will be called when an event happens, and its return value is ignored.

.PP

\fIWARNING\fR: Be very careful of what you do in the event filter function, as it may run in a different thread!

If the quit event is generated by a signal (e.g. SIGINT), it will bypass the internal queue and be delivered to the watch callback immediately, and arrive at the next event poll.

Note: the callback is called for events posted by the user through \fBSDL_PushEvent()\fR, but not for disabled events, nor for events by a filter callback set with \fBSDL_SetEventFilter()\fR, nor for events posted by the user through \fBSDL_PeepEvent()\fR.

.SH RELATED FUNCTIONS

\fISDL_DelEventWatch
.br
\fISDL_SetEventWatch
