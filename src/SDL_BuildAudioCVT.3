.TH SDL_BuildAudioCVT 3 "2018.10.07" "https://github.com/haxpor/sdl2-manpage" "SDL2"
.SH NAME
\fBSDL_BuildAudioCVT\fR -- Function

.SH SYNOPSIS
Use this function to initialize an \fBSDL_AudioCVT\fR structure for conversion.

.SH SYNTAX
.TS
tab(:) allbox;
a.
T{
.nf
int SDL_BuildAudioCVT(SDL_AudioCVT*   cvt,
                      SDL_AudioFormat src_format,
                      Uint8           src_channels,
                      int             src_rate,
                      SDL_AudioFormat dst_format,
                      Uint8           dst_channels,
                      int             dst_rate)
.fi
T}
.TE

.SH FUNCTION PARAMETERS
.TS
tab(:) allbox;
ab l.
cvt:T{
an \fBSDL_AudioCVT\fR structure filled in with audio conversion information
T}
src_format:T{
the source format of the audio data; for more info see \fBSDL_AudioFormat\fR
T}
src_channels:T{
the number of channels in the source
T}
src_rate:T{
the frequency (samples-frames-per-second) of the source
T}
dst_format:T{
the destination format of the audio data; for more info see \fBSDL_AudioFormat\fR
T}
dst_channels:T{
the number of channels in the destination
T}
dst_rate:T{
the frequency (samples-frames-per-second) of the destination
T}
.TE

.SH RETURN VALUE
Returns 1 if the audio filter is prepared, 0 if no conversion is needed, or a negative error code on failure; call \fBSDL_GetError()\fR for more information.

.SH CODE EXAMPLES

.TS
tab(:) allbox;
a.
T{
.nf
// Change 1024 stereo sample frames at 48000Hz from float32 to int16
SDL_AudioCVT cvt;
SDL_BuildAudioCVT(&cvt, AUDIO_F32, 2, 48000, AUDIO_S16, 2, 48000);
SDL_assert(cvt.needed);  // obviously, this one is always needed
cvt.len = 1024 * 2 * 4;  // 1024 stereo float32 sample frames.
cvt.buf = (Uint8 *)SDL_malloc(cvt.len * cvt.len_mult);
// read your float32 data into cvt.buf here.
SDL_ConvertAudio(&cvt);
// cvt.buf has cvt.len_cvt bytes of converted data now.
.fi
T}
.TE

.SH REMARKS
Before an \fBSDL_AudioCVT\fR structure can be used to convert audio data it must be initialized with source and destination information.

This function will zero out every field of the \fBSDL_AudioCVT\fR, so it must be called before the application fills in the final buffer information.

Once this function has returned successfully, and reported that a conversion is necessary, the application fills in the rest of the fields in \fBSDL_AudioCVT\fR, now that it knows how large a buffer if needs to allocate, and then can call \fBSDL_ConvertAudio()\fR to complete the conversion.

.SH RELATED FUNCTIONS
\fISDL_ConvertAudio
