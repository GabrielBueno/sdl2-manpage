.TH SDL_GetThreadID 3 "2018.10.07" "https://github.com/haxpor/sdl2-manpage" "SDL2"
.SH NAME
\fBSDL_GetThreadID\fR -- Function

.SH SYNOPSIS
Use this function to get the thread identifier for the specified thread.

.SH SYNTAX
.TS
tab(:) allbox;
a.
T{
.nf
SDL_threadID SDL_GetThreadID(SDL_Thread*    thread)
.fi
T}
.TE

.SH FUNCTION PARAMETERS
.TS
tab(:) allbox;
ab l.
thread:T{
the thread to query
T}
.TE

.SH RETURN VALUE
Returns the ID of the specified thread, or the ID of the current thread if \fBthread\fR is NULL.

.SH CODE EXAMPLES
.TS
tab(:) allbox;
a.
T{
.nf
#include <stdio.h>
#include "SDL.h"

// Very simple thread - counts 0 to 9 delaying 50ms between increments
int TestThread(void* ptr)
{
  int cnt;
  for (cnt = 0; cnt < 10; ++cnt)
  {
    printf("\\nThread counter: %d", cnt);
    SDL_Delay(50);
  }

  return cnt;
}

int main(int argc, char* argv[])
{
  SDL_Thread    *thread;
  SDL_threadID  threadID;
  int           threadReturnValue;

  printf("\nSimple SDL_CreateThread test:");

  /* Simply create a thread */
  thread = SDL_CreateThread(TestThread, "TestThread", (void*)NULL);

  if (thread == NULL)
  {
    printf("\\nSDL_CreateThread failed: %s\\n", SDL_GetError());
    exit(-1);
  }

  /* Retrieve the ID for the newly launched thread */
  threadID = SDL_GetThreadID(thread);

  /* Wait for the thread to complete and get the return code */
  SDL_WaitThread(thread, &threadReturnValue);
  printf("\\nThread returned value: %d", threadReturnValue);

  return 0;
}
.fi
T}
.TE

.SH REMARKS
This thread identifier is as reported by the underying operating system. If SDL is running on a platform that does not support threads, the return value will always be zero.

.SH RELATED FUNCTIONS
\fISDL_ThreadID
