.TH SDL_atomic_t 3 "2018.09.27" "https://github.com/haxpor/sdl2-manpage" "SDL2"
.SH NAME
\fBSDL_atomic_t\fR -- Structure

.SH SYNOPSIS
A structure representing an atomic integer value.

.SH DATA FIELDS
.TS
tab(:) allbox;
a lb l.
int:value:T{
the atomic integer value
T}
.TE

.SH CODE EXAMPLES

.TS
tab(:) allbox;
a.
T{
.nf
/* This is a simple fps counter program
 *
 * Timers in SDL are run in a separate thread
 * so effort is needed to avoid data races
 */
SDL_atomic_t frames;

/* Calculate and display the average framerate over the set interval */
Uint32 fps_timer_callback(Uint32 interval, void *data)
{
  const float f = SDL_AtomicGet(&frames);
  const float iv = (float)interval / 1000.0f;
  printf("%.2f\(rstfps\(rsn", f / iv);

  /* Reset frame counter */
  SDL_AtomicSet(&frames, 0);

  return interval;
}

int main(int argc, char **argv)
{
  SDL_Init(SDL_INIT_EVERYTHING);
  SDL_Window *win = SDL_CreateWindow("Counter",
                      SDL_WINDOWPOS_CENTERED, 
                      SDL_WINDOWPOS_CENTERED,
                      640,
                      480,
                      0
                      );

  SDL_Surface *screen = SDL_GetWindowSurface(win);

  /* Our timer will be run every five seconds in a separate thread */
  SDL_AddTimer(5000, fps_timer_callback, NULL);

  SDL_Event e;
  while(1) {
    while (SDL_PollEvent(&e) {
      if (e.type == SDL_QUIT) {
        goto quit;
      }
    }
    SDL_FillRect(screen, NULL, 0xffffffff);
    SDL_UpdateWindowSurface(win);

    /* Add one frame */
    SDL_AtomicAdd(&frames, 1);
  }
quit:
  SDL_DestroyWindow(win);
  SDL_Quit();
  return 0;
}
.fi
T}
.TE

.SH REMARKS
\fBSDL_atomic\fR is a structure so people don't accidentally use numeric operation on it. Instead, you should use the atomic operation functions to work with the integer value.

.SH RELATED FUNCTIONS
\fISDL_AtomicAdd
.br
\fISDL_AtomicCAS
.br
\fISDL_AtomicDecRef
.br
\fISDL_AtomicGet
.br
\fISDL_AtomicIncRef
.br
\fISDL_AtomicSet
