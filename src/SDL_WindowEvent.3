.TH SDL_WindowEvent 3 "2018.09.27" "https://github.com/haxpor/sdl2-manpage" "SDL2"
.SH NAME
\fBSDL_WindowEvent\fR -- Structure

.SH SYNOPSIS
A structure that contains window state change event data.

.SH DATA FIELDS
.TS
tab(:) allbox;
a lb l.
Uint32:type:T{
\fBSDL_WINDOWEVENT\fR
T}
Uint32:timestamp:T{
timestamp of the event
T}
Uint32:windowID:T{
the associated window
T}
Uint8:event:T{
\fBSDL_WindowEventID\fR
T}
Sint32:data1:T{
event dependent data
T}
Sint32:data2:T{
event dependent data
T}
.TE

.SH CODE EXAMPLES

.TS
tab(:) allbox;
a.
T{
.nf
void PrintEvent(const SDL_Event *event)
{
  if (event->type == SDL_WINDOWEVENT) {
    switch (event->window.event) {
    case SDL_WINDOWEVENT_SHOWN:
      SDL_Log("Window %d shown",
        event->window.windowID);
      break;
    case SDL_WINDOWEVENT_HIDDEN:
      SDL_Log("Window %d hidden",
        event->window.windowID);
      break;
    case SDL_WINDOWEVENT_EXPOSED:
      SDL_Log("Window %d exposed",
        event->window.windowID);
      break;
    case SDL_WINDOWEVENT_MOVED:
      SDL_Log("Window %d moved to %d, %d",
        event->window.windowID,
        event->window.data1,
        event->window.data2);
      break;
    case SDL_WINDOWEVENT_RESIZED:
      SDL_Log("Window %d resized to %dx%d",
        event->window.windowID,
        event->window.data1,
        event->window.data2);
      break;
    case SDL_WINDOWEVENT_SIZE_CHANGED:
      SDL_Log("Window %d size changed to %dx%d",
        event->window.windowID,
        event->window.data1,
        event->window.data2);
      break;
    case SDL_WINDOWEVENT_MINIMIZED:
      SDL_Log("Window %d minimized",
        event->window.windowID);
      break;
    case SDL_WINDOWEVENT_MAXIMIZED:
      SDL_Log("Window %d maximized",
        event->window.windowID);
      break;
    case SDL_WINDOWEVENT_RESTORED:
      SDL_Log("Window %d restored",
        event->window.windowID);
      break;
    case SDL_WINDOWEVENT_ENTER:
      SDL_Log("Mouse entered window %d",
        event->window.windowID);
      break;
    case SDL_WINDOWEVENT_LEAVE:
      SDL_Log("Mouse left window %d",
        event->window.windowID);
      break;
    case SDL_WINDOWEVENT_FOCUS_GAINED:
      SDL_Log("Window %d gained keyboard focus",
        event->window.windowID);
      break;
    case SDL_WINDOWEVENT_FOCUS_LOST:
      SDL_Log("Window %d lost keyboard focus",
        event->window.windowID);
      break;
    case SDL_WINDOWEVENT_CLOSE:
      SDL_Log("Window %d closed",
        event->window.windowID);
      break;
#if SDL_VERSION_ATLEAST(2, 0, 5)
    case SDL_WINDOWEVENT_TAKE_FOCUS:
      SDL_Log("Window %d is offered a focus",
        event->widnow.windowID);
      break;
    case SDL_WINDOWEVENT_HIT_TEST:
      SDL_Log("Window %d has a special hit test",
        event->window.windowID);
      break;
#endif
    default:
      SDL_Log("Window %d got unknown event %d",
        event->window.windowID,
        event->window.event);
      break;
    } 
  }
}
.fi
T}
.TE

.SH REMARKS

\fBSDL_WindowEvent\fR is a member of the \fBSDL_Event\fR union and is used when an event of type SDL_WINDOWEVENT is reported. You would access it through the event's \fIwindow\fR field.

.SH RELATED ENUMERATIONS
\fISDL_EventType
.br
\fISDL_WindowEventID

.SH RELATED STRUCTURES
\fISDL_Event
