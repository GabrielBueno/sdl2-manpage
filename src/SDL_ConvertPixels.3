.TH SDL_ConvertPixels 3 "2018.10.07" "https://github.com/haxpor/sdl2-manpage" "SDL2"
.SH NAME
\fBSDL_ConvertPixels\fR -- Function

.SH SYNOPSIS
Use this function to copy a block of pixels of one format to another format.

.SH SYNTAX
.TS
tab(:) allbox;
a.
T{
.nf
void SDL_ConvertPixels(int          width,
                       int          height,
                       Uint32       src_format,
                       const void*  src,
                       int          src_pitch,
                       Uint32       dst_format,
                       void*        dst,
                       int          dst_pitch)
.fi
T}
.TE

.SH FUNCTION PARAMETERS
.TS
tab(:) allbox;
ab l.
width:the width of the block to copy, in pixels
height:the height of the block to copy, in pixels
src_format:the format of the source pixels; see \fBRemarks\fR for details
src:a pointer to the source pixels
src_pitch:the pitch of the block to copy
dst_format:the format of the destination pixels; see \fBRemarks\fR for details
dst:a pointer to be filled in with new pixel data
dst_pitch:the pitch of the destination pixels
.TE

.SH RETURN VALUE
Returns 0 on success or a negative error code on failure; call \fBSDL_GetError()\fR for more information.

.SH REMARKS
\fBsrc_format\fR and \fBdst_format\fR may each be one of the following.

\fBSDL_PixelFormatEnum\fR values:

.TS
tab(:) allbox;
ab l.
SDL_PIXELFORMAT_UNKNOWN:
SDL_PIXELFORMAT_INDEX1LSB:
SDL_PIXELFORMAT_INDEX1MSB:
SDL_PIXELFORMAT_INDEX4LSB:
SDL_PIXELFORMAT_INDEX4MSB:
SDL_PIXELFORMAT_INDEX8:
SDL_PIXELFORMAT_RGB332:
SDL_PIXELFORMAT_RGB444:
SDL_PIXELFORMAT_RGB555:
SDL_PIXELFORMAT_BGR555:
SDL_PIXELFORMAT_ARGB4444:
SDL_PIXELFORMAT_RGBA4444:
SDL_PIXELFORMAT_ABGR4444:
SDL_PIXELFORMAT_BGRA4444:
SDL_PIXELFORMAT_ARGB1555:
SDL_PIXELFORMAT_RGBA5551:
SDL_PIXELFORMAT_ABGR1555:
SDL_PIXELFORMAT_BGRA5551:
SDL_PIXELFORMAT_RGB565:
SDL_PIXELFORMAT_BGR565:
SDL_PIXELFORMAT_RGB24:
SDL_PIXELFORMAT_BGR24:
SDL_PIXELFORMAT_RGB888:
SDL_PIXELFORMAT_RGBX8888:
SDL_PIXELFORMAT_BGR888:
SDL_PIXELFORMAT_BGRX8888:
SDL_PIXELFORMAT_ARGB8888:
SDL_PIXELFORMAT_RGBA8888:
SDL_PIXELFORMAT_ABGR8888:
SDL_PIXELFORMAT_BGRA8888:
SDL_PIXELFORMAT_ARGB2101010:
SDL_PIXELFORMAT_RGBA32:T{
alias for RGBA byte array of color data, for the current platform (>= SDL 2.0.5)
T}
SDL_PIXELFORMAT_ARGB32:T{
alias for ARGB byte array of color data, for the current platform (>= SDL 2.0.5)
T}
SDL_PIXELFORMAT_BGRA32:T{
alias for BGRA byte array of color data, for the current platform (>= SDL 2.0.5)
T}
SDL_PIXELFORMAT_ABGR32:T{
alias for ABGR byte array of color data, for the current platform (>= SDL 2.0.5)
T}
SDL_PIXELFORMAT_YV12:T{
planar mode: Y + V + U (3 planes)
T}
SDL_PIXELFORMAT_IYUV:T{
planar mode: Y + U + V (3 planes)
T}
SDL_PIXELFORMAT_YUY2:T{
packet mode: Y0 + U0 + Y1 + V0 (1 plane)
T}
SDL_PIXELFORMAT_UYVY:T{
packed mode: U0 + Y0 + V0 + Y1 (1 plane)
T}
SDL_PIXELFORMAT_YVYU:T{
packed mode: Y0 + V0 + Y1 + U0 (1 plane)
T}
SDL_PIXELFORMAT_NV12:T{
planar mode: Y + U/V interleaved (2 planes) (>= SDL 2.0.4)
T}
SDL_PIXELFORMAT_NV21:T{
planar mode: Y + V/U interleaved (2 planes) (>= SDL 2.0.4)
T}
.TE
