.TH SDL_AllocRW 3 "2018.10.07" "https://github.com/haxpor/sdl2-manpage" "SDL2"
.SH NAME
\fBSDL_AllocRW\fR -- Function

.SH SYNOPSIS
Use this function to allocate an empty, unpopulated \fBSDL_RWops\fR structure.

.SH SYNTAX
.TS
tab(:) allbox;
a.
T{
.nf
SDL_RWops* SDL_AllocRW(void)
.fi
T}
.TE

.SH RETURN VALUE
Returns a pointer to the allocated memory on success, or NULL on failure; call \fBSDL_GetError()\fR for more information.

.SH CODE EXAMPLES
.TS
tab(:) allbox;
a.
T{
.nf
#include "stdlib.h"
#include "SDL.h"

/* These functions should not be used except from pointers in an SDL_RWops */
static Sint64 mysizefunc(SDL_RWops *context)
{
  return -1;
}

static Sint64 myseekfunc(SDL_RWops *context, Sint64 offset, int whence)
{
  return SDL_SetError("Can't seek in this kind of SDL_RWops");
}

static size_t myreadfunc(SDL_RWops *context, void *ptr, size_t size, size_t maxnum)
{
  SDL_memset(ptr, 0, size*maxnum);
  return maxnum;
}

static size_t mywritefunc(SDL_RWops *context, const void *ptr, size_t size, size_t num)
{
  return num;
}

static int myclosefunc(SDL_RWops *context)
{
  if (context->type != 0xdeadbeef)
  {
    return SDL_SetError("Wrong kind of SDL_RWops for myclosefunc()");
  }

  free(context->hidden.unknown.data1);
  SDL_FreeRW(context);
  return 0;
}

SDL_RWops *MyCustomRWop()
{
  SDL_RWops *c = SDL_AllocRW();
  if (c == NULL) return NULL;

  c->size = mysizefunc;
  c->seek = myseekfunc;
  c->read = myreadfunc;
  c->write = mywritefunc;
  c->close = myclosefunc;
  c->type = 0xdeadbeef;
  c->hidden.unknown.data1 = malloc(256);
  return c;
}
.fi
T}
.TE

.SH REMARKS
Applications do not need to use this function unless they are providing their own \fBSDL_RWops\fR implementation. If you just need a \fBSDL_RWops\fR to read/write a common data source, you should use the built-in implementation in SDL, like \fBSDL_RWFromFile()\fR or \fBSDL_RWFromMem()\fR, etc.

You must free the returned pointer with \fBSDL_FreeRW()\fR. Depending on your operating system and compiler, there may be a difference between the malloc() and free() your program uses and the versions SDL calls internally. Trying to mix the two can cause crashing such as segmentation faults. Since all \fBSDL_RWops\fR must free themselves when their \fBclose\fR method is called, all \fBSDL_RWops\fR must be allocated through this function, so they can all be freed correctly with \fBSDL_FreeRW()\fR.

.SH RELATED FUNCTIONS
\fISDL_FreeRW
