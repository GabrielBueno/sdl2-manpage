.TH SDL_RWops 3 "2018.09.27" "https://github.com/haxpor/sdl2-manpage" "SDL2"
.SH NAME
\fBSDL_RWops\fR -- Structure

.SH SYNOPSIS
A structure that provides an abstract interface to stream I/O. Applications can generally ignore the specifics of this structure's internals and treat them as opaque pointers. The details are important to lower-level code that might need to implement one of these, however.

.SH DATA FIELDS
.TS
tab(:) allbox;
a lb l.
Sint64 (*)(SDL_RWops *):size:T{
callback that reports stream size; see \fIRemarks\fR
T}
Sint64 (*)(SDL_RWops *, Sint64, int):seek:T{
callback that seeks in stream; see \fIRemarks\fR
T}
size_t (*)(SDL_RWops *, void *, size_t, size_t):read:T{
callback that reads from the stream; see \fIRemarks\fR
T}
size_t (*)(SDL_RWops *, const void *, size_t, size_t):write:T{
callback that writes to the stream; see \fIRemarks\fR
T}
int (*)(SDL_RWops *):close:T{
callback that closes the stream; see \fIRemarks\fR
T}
Uint32:type:T{
type of stream; see \fIRemarks\fR
T}
union:hidden:T{
type-specific data; see \fIRemarks\fR
T}
.TE

.SH CODE EXAMPLES

.TS
tab(:) allbox;
a.
T{
.nf
SDL_RWops *io = SDL_RWFromFile("username.txt", "rb");
if (io != NULL) {
  char name[256];
  if (io->read(io, name, sizeof(name), 1) > 0) {
    printf("Hello, $s!\n", name);
  }
  io->close(io);
}
.fi
T}
.TE

.PP
The following is functionally identical to the above example, but uses the recommended macro interface.

.TS
tab(:) allbox;
a.
T{
.nf
SDL_RWops *io = SDL_RWFromFile("username.txt", "rb");
if (io != NULL) {
  char name[256];
  if (SDL_RWread(io, name, sizeof(name), 1) > 0) {
    printf("Hello, %s!\n", name);
  }
  SDL_RWclose(io);
}
.fi
T}
.TE

.SH REMARKS
\fBSDL_RWops\fR is an abstraction over I/O. It provides interfaces to read, write and seek data in a stream, without the caller needing to know where the data is coming from.

For example, a RWops might be fed by a memory buffer, or a file on disk, or a connection to a web server, without any changes to how the caller consumes the data.

SDL provides some internal methods for reading from common stream types, like files and memory buffers, but this structure can be used by the application or third party libraries to implement whatever type of stream it pleases.

Mose of the fields of this structure are function pointers that are used as callbacks to implement the stream interface. All of them use SDLCALL calling convention.

Please note that many of these function pointers used ints in SDL 1.2; to give them a better range, they have become Sint64 in SDL 2.0.

Application shouldn't have to care about the internals of this structure. They can treat it as an opaque data pointer and use the \fBSDL_RWread()\fR, \fBSDL_WRwrite()\fR, \fBSDL_RWseek()\fR, \fBSDL_RWtell()\fR, and \fBSDL_RWclose()\fR functions on them. Applications almost never create or modify these structures either, instead favoring creation functions like \fBSDL_RWFromFile()\fR, \fBSDL_RWFromMem()\fR, etc.

Third-party libraries and special low-level code may need to know how to properly implement this struct, however.

.SS Size Function

\fBsize\fR is a function pointer that reports the stream's total size in bytes. If the stream size can't be determined (either because it doesn't make sense for the stream type, or there was an err), this function returns -1.

.SS Seek Function

\fBseek\fR is a function pointer that positions the next read/write operation in the stream. This seeks in byte offsets. If the stream cannot seek (either because it doesn't make sense for the stream type, or there was an error), this function returns -1, otherwise it returns the new position. Seeking zero bytes from \fBRW_SEEK_CUR\fR is a common way to determine the current stream position.

The final argument works like the standard fseek() "whence":

.TS
tab(:) allbox;
a l l.
Identifier:Value:Explanation
RW_SEEK_SET:0:T{
Seek from the beginning of data
T}
RW_SEEK_CUR:1:T{
Seek relative to current read point
T}
RW_SEEK_END:2:T{
Seek relative to the end of data
T}
.TE

.SS Read Function

\fBread\fR is a function pointer that reads from the stream. It reads up to num objects each of size bytes into the buffer pointer to by ptr. Returns the number of objects read, which may be less than requested. Returns 0 on error or EOF.

.SS Write Function

\fBwrite\fR is a function pointer that writes to the stream. It writes exactly num objects each of size bytes from the buffer pointer to by ptr. Returns the number of objects written, which will be less than requested on error.

.SS Close Function

\fBclose\fR is a function pointer that cleans up the stream. It should release any resources used by the stream and free the \fBSDL_RWops\fR itself with \fBSDL_FreeRW()\fR. This returns 0 on success, or -1 if the stream failed to flush to disk (or whereever). The \fBSDL_RWops\fR is no longer valid after this call, even if flushing the stream failed.

.SS Stream Type

The \fBtype\fR field is currently one of these values. An application can usually ignore this information.

.TS
tab(:) allbox;
a l l.
Identifier:Value:Description
.T&
ab l l.
SDL_RWOPS_UNKNOWN:0:T{
Unknown stream type or application-defined
T}
SDL_RWOPS_WINFILE:1:T{
Win32 file handle
T}
SDL_RWOPS_STDFILE:2:T{
stdio.h \fIFILE*\fR
T}
SDL_RWOPS_JNIFILE:3:T{
Android asset
T}
SDL_RWOPS_MEMORY:4:T{
Memory stream (read/write)
T}
SDL_RWOPS_MEMORY_RO:5:T{
Memory stream (read-only)
T}
.TE

.PP
Applications and libraries rolling their own RWops implementations should use \fBSDL_RWOPS_UNKNOWN\fR. All other values are currently reserved for SDL's internal use.

.SS Hidden Union

Applications can ignore this union completely. All of the fields in this union are platform-specific and off-limits, used internally by SDL, with one exception. You may use the \fBunknown\fB struct to store your own RWops implementation's data, possibly cleaning it up during the \fBclose\fR method. If your data doesn't fit in two pointers, use these pointers, to hold an allocated structure that contains the real data.

.SH RELATED FUNCTIONS
\fISDL_AllocRW
.br
\fISDL_FreeRW
.br
\fISDL_RWclose
.br
\fISDL_RWFromConstMem
.br
\fISDL_RWFromFile
.br
\fISDL_RWFromFP
.br
\fISDL_RWFromMem
.br
\fISDL_RWread
.br
\fISDL_RWseek
.br
\fISDL_RWtell
.br
\fISDL_RWwrite
