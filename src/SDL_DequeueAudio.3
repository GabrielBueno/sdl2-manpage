.TH SDL_DequeueAudio 3 "2018.10.07" "https://github.com/haxpor/sdl2-manpage" "SDL2"
.SH NAME
\fBSDL_DequeueAudio\fR -- Function

.SH SYNOPSIS
Use this function to dequeue more audio on non-callback devices.

.SH SYNTAX
.TS
tab(:) allbox;
a.
T{
.nf
Uint32 SDL_DequeueAudio(SDL_AudioDeviceID     dev,
                        void*                 data,
                        Uint32                len)
.fi
T}
.TE

.SH FUNCTION PARAMETERS
.TS
tab(:) allbox;
ab l.
dev:T{
the device ID from which we will dequeue audio
T}
data:T{
a pointer into where audio data should be copied
T}
len:T{
the number of bytes (not samples!) to which (data) points
T}
.TE

.SH RETURN VALUE
Returns number of bytes dequeued, which could be less than requested; call \fBSDL_GetError()\fR for more information.

.SH REMARKS
If you are looking to queue audio for output on a non-callback playback device, you want \fBSDL_QueueAudio()\fR instead. \fBSDL_DequeueAudio()\fR will always return 0 if you use it with playback devices.

SDL offsers two ways to retrieve audio from a capture device: you can either supply a callback that SDL triggers  with some frequency as the device records more audio data, (push method), or you can supply no callback, and then SDL will expect you to retrieve data at regular intervals (pull method) with this function.

There are no limits on the amount of data you can queue, short of exhuastion of address space. Data from the device will keep queuing as necessary without further intervention from you. This means you will eventually run out of memory if you aren't routinely dequeueing data.

Capture devices will not queue data when paused; if you are expecting to not need captured audio for some length of time, use \fBSDL_PauseAudioDevice()\fR to stop the capture device from queueing more data. This can be useful during, say, level loading times. When unpaused, capture devices will start queueing data from that point, having flushed any capturable data available while paused.

This function is thread-safe, but dequeueing from the same device from two threads at once does not promise which thread will dequeued data first.

You may not dequeue audio from a device that is using an application-supplied callback; doing so returns an error. You have to use the audio callback, or dequeue audio with this function, but not both.

You should not call \fBSDL_LockAudio()\fR on the device before queueing; SDL handles locking internally for this function.

.SH VERSION
This function is available since SDL 2.0.5.

.SH RELATED FUNCTIONS
\fISDL_ClearQueuedAudio
.br
\fISDL_GetQueuedAudioSize
