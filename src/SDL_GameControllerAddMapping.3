.TH SDL_GameControllerAddMapping 3 "2018.10.07" "https://github.com/haxpor/sdl2-manpage" "SDL2"
.SH NAME
\fBSDL_GameControllerAddMapping\fR -- Function

.SH SYNOPSIS
Use this function to add support for controllers that SDL is unaware of or to cause exsisting controller to have a different binding.

.SH SYNTAX
.TS
tab(:) allbox;
a.
T{
.nf
int SDL_GameControllerAddMapping(const char* mappingString)
.fi
T}
.TE

.SH FUNCTION PARAMETERS
.TS
tab(:) allbox;
ab l.
mappingString:T{
the mapping string; see below
T}
.TE

.SH RETURN VALUE
Returns 1 if a new mapping is added, o if an existing mapping is updated, -1 on error; call \fBSDL_GetError()\fR for more information.

.SH REMARKS
The mapping string has the format "GUID,name,mapping", where GUID is the string value from \fBSDL_JoystickGetGUIDString()\fR, name is the human readable string for the device and mappings are controller mappings to joystick ones. Under Windows there is a reserved GUID of "xinput" that covers all XInput devices. The mapping format for joystick is:


.TS
tab(:) allbox;
ab l.
bX:T{
a joystick button, index X
T}
hX.Y:T{
hat X with value Y
T}
aX:T{
axis X of the joystick
T}
.TE

Buttons can be used as a controller axes and vice versa.

This string shows an example of a valid mapping for a controller: "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"

.SH RELATED FUNCTIONS
\fISDL_GameControllerMapping
.br
\fISDL_GameControllerMappingForGUID
