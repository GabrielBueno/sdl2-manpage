.TH SDL_CreateRGBSurface 3 "2018.10.07" "https://github.com/haxpor/sdl2-manpage" "SDL2"
.SH NAME
\fBSDL_CreateRGBSurface\fR -- Function

.SH SYNOPSIS
Use this function to allocate a new RGB surface.

.SH SYNTAX
.TS
tab(:) allbox;
a.
T{
.nf
SDL_Surface* SDL_CreateRGBSurface(Uint32    flags,
                                  int       width,
                                  int       height,
                                  int       depth,
                                  Uint32    Rmask,
                                  Uint32    Gmask,
                                  Uint32    Bmask,
                                  Uint32    Amask)
.fi
T}
.TE

.SH FUNCTION PARAMETERS
.TS
tab(:) allbox;
ab l.
flags:the flags are unused and should be set to 0
width:the width of the surface
height:the height of the surface
depth:the depth of the surface in bits; see \fBRemarks\fR for details
Rmask:the red mask for the pixels
Gmask:the green mask for the pixels
Bmask:the blue mask for the pixels
Amask:the alpha mask for the pixels
.TE

.SH RETURN VALUE
Returns the new \fBSDL_Surface\fR structure that is created or NULL if it falls; call \fBSDL_GetError()\fR for more information.

.SH CODE EXAMPLES
.TS
tab(:) allbox;
a.
T{
.nf
/* Create a 32-bit surface with the bytes of each pixel in R,G,B,A order, as expected by OpenGL for textures */
SDL_Surface* surface;
Uint32 rmask, gmask, bmask, amask;

/* SDL interprets each pixel as a 32-bit number, so our masks must depend on the endianness (byte order) of the machine */
#if SDL_BYTEORDER == SDL_BIG_ENDIAN
  rmask = 0xff000000;
  gmask = 0x00ff0000;
  bmask = 0x0000ff00;
  amask = 0x000000ff;
#else
  rmask = 0x000000ff;
  gmask = 0x0000ff00;
  bmask = 0x00ff0000;
  amask = 0xff000000;
#endif

surface = SDL_CreateRGBSurface(0, width, height, 32, rmask, gmask, bmask, amask);
if (surface == NULL)
{
  SDL_Log("SDL_CreateRGBSurface() failed: %s", SDL_GetError());
  exit(1);
}

/* or using the default masks for the depth: */
surface = SDL_CreateRGBSurface(0, width, height, 32, 0, 0, 0, 0);
.fi
T}
.TE

.SH REMARKS
The \fBdepth\fR if 4 or 8 bits, and empty palette is allocated for the surface. If \fBdepth\fR is greater than 8 bits, the pixel format is set using the [RGBA]mask parameters.

The [RGBA]mask parameters are the bitmasks used to extract that color from a pixel. \fBRmask\fR being FF000000 means the red data is stored in the most significant byte. Using zeros for the RGB masks sets a default value, based on the depth. (e.g. \fBSDL_CreateRGBSurface(0,w,h,32,0,0,0,0)\fR;) However, using zero for the Amask results in an Amask of 0.

By default surfaces with an alpha mask are set up for blending as with

.IP
SDL_SetSurfaceBlendMode(surface, SDL_BLENDMODE_BLEND)
.PP

You can change this by calling \fBSDL_SetSurfaceBlendMode()\fR and selecting a different \fIblendmode\fR.

.SH RELATED FUNCTIONS
\fISDL_CreateRGBSurfaceFrom
.br
\fISDL_CreateRGBSurfaceWithFormat
.br
\fISDL_FreeSurface
