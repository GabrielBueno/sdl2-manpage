.TH SDL_RWFromConstMem 3 "2018.10.07" "https://github.com/haxpor/sdl2-manpage" "SDL2"
.SH NAME
\fBSDL_RWFromConstMem\fR -- Function

.SH SYNOPSIS
Use this function to prepare a read-only memory buffer for use with \fBRWops\fR.

.SH SYNTAX
.TS
tab(:) allbox;
a.
T{
.nf
SDL_RWops* SDL_RWFromConstMem(const void*   mem,
                              int           size)
.fi
T}
.TE

.SH FUNCTION PARAMETERS
.TS
tab(:) allbox;
ab l.
mem:T{
a pointer to a read-only buffer to feed an \fBSDL_RWops\fR stream
T}
size:T{
the buffer size, in bytes
T}
.TE

.SH RETURN VALUE
Returns a pointer to a new \fBSDL_RWops\fR structure, or NULL if it fails; call \fBSDL_GetError()\fR for more information.

.SH CODE EXAMPLES
.TS
tab(:) allbox;
a.
T{
.nf
char bitmap[] = {
  66, 77, 86, 2, 0, 0, 0, 0 ...
};
SDL_RWops *rw = SDL_RWFromConstantMem(bitmap, sizeof(bitmap));
SDL_Surface *img = SDL_LoadBMP_RW(rw, 1); /* Automatically frees the RWops struct for us */
/* Do something with img ... */
.fi
T}
.TE

.SH REMARKS
This function sets up an \fBSDL_RWops\fR struct based on a memory area of a certain size. It assumes the memory area is not writable.

Attempting to write to this RWops stream will report an error without writing to the memory buffer.

This memory buffer is not copied by the RWops; the pointer you provide must remain valid until you close the stream. Closing the stream will not free the original buffer.

If you need to write to a memory buffer, you should use \fBSDL_RWFromMem()\fR with a writable buffer of memory instead.

.SH RELATED FUNCTIONS
\fISDL_RWclose\fR
.br
\fISDL_RWFromConstMem\fR
.br
\fISDL_RWFromFile\fR
.br
\fISDL_RWFromFP\fR
.br
\fISDL_RWFromMem\fR
.br
\fISDL_RWread\fR
.br
\fISDL_RWseek\fR
.br
\fISDL_RWtell\fR
